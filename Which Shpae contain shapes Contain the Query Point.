/*
* Hadeel Qadri
* September 24, 2022
* This program reads in three shapes and a query point and then determines which shapes contain the 
query point.
  
*/

#include <iostream>
#include <cmath>
using namespace std;

int main() {
   double xOfFirstCircle,yOfFirstCircle; // the x and y corrdinate of the first circle
   double xOfSecondCircle,yOfSecondCircle; // the x and y corrdinate of the second circle
   double radiusOfFirstCircle,radiusOfSecondCircle;
   double xOfRectangular,yOfRectangular;
   int length, height; 
   double xOfTheQuery, yOfTheQuery;
   double firstCircle, secondCircle;//using pythagoriean theorem to determine wether a circle contains the query point
   double xLocationOfTheRightSide,yLocationOfTheTopSide;
   
     // prompt for user to enter the following
     
   cout << "Enter x and y coordinates of the 1st circle: ";
   cin >> xOfFirstCircle>> yOfFirstCircle;

   cout << "Enter radius of the 1st circle: ";
   cin >> radiusOfFirstCircle;
   
   cout << "Enter x and y coordinates of the rectangle: ";
   cin >> xOfRectangular >> yOfRectangular;
   
   cout << "Enter length and height coordinates of the rectangle: ";
   cin >> length >> height;
   
   cout << "Enter x and y coordinates of the 2nd circle: ";
   cin >> xOfSecondCircle >> yOfSecondCircle;
   
   cout<< "Enter radius of the 2nd circle:";
   cin >> radiusOfSecondCircle;
   
   cout << " Enter x and y coordinates of the query point: ";
   cin >> xOfTheQuery >> yOfTheQuery;
   
     
   //rx+length= the x location of the right side
    xLocationOfTheRightSide= xOfRectangular+length;
    
   //ry+h= the y location for the top side ;
    yLocationOfTheTopSide =yOfRectangular+height;
    
 
  // using pythagorean theorem to determine wether a circle contains the query point with the following equation
   firstCircle=sqrt((pow((xOfTheQuery-xOfFirstCircle),2)+pow((yOfTheQuery-yOfFirstCircle),2)));
   
   secondCircle=sqrt((pow((xOfTheQuery-xOfSecondCircle),2))+(pow((yOfTheQuery-yOfSecondCircle),2)));
   
   // the first if statement comparing all shapes to see if they contain query point
   if((firstCircle<=radiusOfFirstCircle &&secondCircle<=radiusOfSecondCircle ) && (xOfTheQuery >=xOfRectangular && xOfTheQuery<=xLocationOfTheRightSide) && (yOfTheQuery>=yOfRectangular && yOfTheQuery<=yLocationOfTheTopSide))
   {
       cout<<"All shapes contain point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;;
   }
   
   // this if statement comparing the first circle and the second circle to see both contain point
    else if (firstCircle<=radiusOfFirstCircle && secondCircle<=radiusOfSecondCircle)
   {
       cout<<"Both circles contain point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
   }
   
   // this if statement comparing the first circle and the rectangle to see if both contain point
   else if ((firstCircle<=radiusOfFirstCircle) && ((xOfTheQuery >=xOfRectangular && xOfTheQuery<=xLocationOfTheRightSide) && (yOfTheQuery>=yOfRectangular && yOfTheQuery<=yLocationOfTheTopSide)))
   {
       cout<<"1st circle and rectangle contain point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
   }
   
   // this if statement comparing the second circle and the rectangle to see if both contain point
   else if((secondCircle<=radiusOfSecondCircle)&& (xOfTheQuery >=xOfRectangular && xOfTheQuery<=xLocationOfTheRightSide) && (yOfTheQuery>=yOfRectangular && yOfTheQuery<=yLocationOfTheTopSide))
   {
       cout<<"2nd circle and rectangle contain point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
   }
   
   // this following if statement comparing if only one of the two circles conatin a point
    else if(firstCircle<=radiusOfFirstCircle || secondCircle<=radiusOfSecondCircle)
   { 
       if(firstCircle<=radiusOfFirstCircle){
           cout<<"1st circle contains point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
       }
       else{
           cout<<"2nd circle contains point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
       }
    }
    // this if statement checking if the rectangle contain a point
    else if ((xOfTheQuery >=xOfRectangular && xOfTheQuery<=xLocationOfTheRightSide) && (yOfTheQuery>=yOfRectangular && yOfTheQuery<=yLocationOfTheTopSide))
       {
          cout<<"Rectangle contains point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
       }
   // this is if statement to determine if no shape contains point
   else{
        cout<<"No shape contains point "<<"("<<xOfTheQuery<<", "<<yOfTheQuery<<")."<<endl;
    }
     
    
 return 0;
   }
